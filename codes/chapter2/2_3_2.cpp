#include <iostream>

int main(int argc, char const *argv[])
{
    // //1
    // int c = 100;
    // int c2 = 200;
    // int *pp = &c;
    // *pp = 110; //更改c对象的值
    // pp = &c2;  //指针赋值 修改指针对象的值
    // *pp = 210; // c2=210
    // std::cout << c << "--" << c2 << std::endl;

    // 2
    /**
     * 指针：
     *   是对象,有自己独立的内存区域存储地址值,可以不初始化
     * 引用:
     *   绑定对象的别名,声明必须绑定对象
     *
     * 想用点 他们都是间接对对象进行反问
     *
     */

    // 3
    //  int i=42;//定义对象i
    //  int *p1=&i;//定义指针对象p1,并且初始化讲i的地址存入p1对象的内存空间
    //  *p1=*p1* *p1;//将i的值*i的值存入 i的内存空间

    // 4
    // int i = 0;
    // // a 非法 不能径int类型的地址值存入 double * 变量
    // // double *dp=&i;

    // // b int类型 不能赋值给 int *指针类型的变量
    // // int *ip=i;

    // // c 正确
    // int *p = &i;

    // // 5
    // int c = 100;
    // int *p = &c;
    // //if (p) 判断指针类型是否是nulllptr

    // // if (*p) 判断p指针指向的c对象的值是否是0

    //6 给定一个p 是否能判断是否是合法对象
    /*
        不能,只能判断是否是空对象 nullltr
        合法地址
          1,允许读写权限
          2,不许只扫该快区域是真的是存储该类型的存储区域
    */

   //
   int i=42;
   void *p=&i;//void * 我们使用它只存地址储值 而非用它去获取执行内存区域的值
   //long *lp=&i; 指着指向的类型不同所以不合法
   
    return 0;
}
